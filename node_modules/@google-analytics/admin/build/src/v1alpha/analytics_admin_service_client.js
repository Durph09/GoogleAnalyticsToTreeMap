"use strict";
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalyticsAdminServiceClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha/analytics_admin_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./analytics_admin_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Service Interface for the Analytics Admin API (GA4).
 * @class
 * @memberof v1alpha
 */
class AnalyticsAdminServiceClient {
    /**
     * Construct an instance of AnalyticsAdminServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new AnalyticsAdminServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b, _c, _d, _e;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this
            .constructor;
        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&
            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&
            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {
            throw new Error('Please set either universe_domain or universeDomain, but not both.');
        }
        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'
            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
            : undefined;
        this._universeDomain =
            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';
        this._servicePath = 'analyticsadmin.' + this._universeDomain;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};
        const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== this._servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = this._servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === this._servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process === 'object' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            accountPathTemplate: new this._gaxModule.PathTemplate('accounts/{account}'),
            accountAccessBindingPathTemplate: new this._gaxModule.PathTemplate('accounts/{account}/accessBindings/{access_binding}'),
            accountSummaryPathTemplate: new this._gaxModule.PathTemplate('accountSummaries/{account_summary}'),
            adSenseLinkPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/adSenseLinks/{adsense_link}'),
            attributionSettingsPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/attributionSettings'),
            audiencePathTemplate: new this._gaxModule.PathTemplate('properties/{property}/audiences/{audience}'),
            bigQueryLinkPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/bigQueryLinks/{bigquery_link}'),
            calculatedMetricPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/calculatedMetrics/{calculated_metric}'),
            channelGroupPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/channelGroups/{channel_group}'),
            conversionEventPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/conversionEvents/{conversion_event}'),
            customDimensionPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/customDimensions/{custom_dimension}'),
            customMetricPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/customMetrics/{custom_metric}'),
            dataRedactionSettingsPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/dataStreams/{data_stream}/dataRedactionSettings'),
            dataRetentionSettingsPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/dataRetentionSettings'),
            dataSharingSettingsPathTemplate: new this._gaxModule.PathTemplate('accounts/{account}/dataSharingSettings'),
            dataStreamPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/dataStreams/{data_stream}'),
            displayVideo360AdvertiserLinkPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/displayVideo360AdvertiserLinks/{display_video_360_advertiser_link}'),
            displayVideo360AdvertiserLinkProposalPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/displayVideo360AdvertiserLinkProposals/{display_video_360_advertiser_link_proposal}'),
            enhancedMeasurementSettingsPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/dataStreams/{data_stream}/enhancedMeasurementSettings'),
            eventCreateRulePathTemplate: new this._gaxModule.PathTemplate('properties/{property}/dataStreams/{data_stream}/eventCreateRules/{event_create_rule}'),
            eventEditRulePathTemplate: new this._gaxModule.PathTemplate('properties/{property}/dataStreams/{data_stream}/eventEditRules/{event_edit_rule}'),
            expandedDataSetPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/expandedDataSets/{expanded_data_set}'),
            firebaseLinkPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/firebaseLinks/{firebase_link}'),
            globalSiteTagPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/dataStreams/{data_stream}/globalSiteTag'),
            googleAdsLinkPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/googleAdsLinks/{google_ads_link}'),
            googleSignalsSettingsPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/googleSignalsSettings'),
            keyEventPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/keyEvents/{key_event}'),
            measurementProtocolSecretPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/dataStreams/{data_stream}/measurementProtocolSecrets/{measurement_protocol_secret}'),
            propertyPathTemplate: new this._gaxModule.PathTemplate('properties/{property}'),
            propertyAccessBindingPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/accessBindings/{access_binding}'),
            rollupPropertySourceLinkPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/rollupPropertySourceLinks/{rollup_property_source_link}'),
            sKAdNetworkConversionValueSchemaPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/dataStreams/{data_stream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}'),
            searchAds360LinkPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/searchAds360Links/{search_ads_360_link}'),
            subpropertyEventFilterPathTemplate: new this._gaxModule.PathTemplate('properties/{property}/subpropertyEventFilters/{sub_property_event_filter}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listAccounts: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'accounts'),
            listAccountSummaries: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'accountSummaries'),
            listProperties: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'properties'),
            listFirebaseLinks: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'firebaseLinks'),
            listGoogleAdsLinks: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'googleAdsLinks'),
            listMeasurementProtocolSecrets: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'measurementProtocolSecrets'),
            listSKAdNetworkConversionValueSchemas: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'skadnetworkConversionValueSchemas'),
            searchChangeHistoryEvents: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'changeHistoryEvents'),
            listConversionEvents: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'conversionEvents'),
            listKeyEvents: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'keyEvents'),
            listDisplayVideo360AdvertiserLinks: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'displayVideo_360AdvertiserLinks'),
            listDisplayVideo360AdvertiserLinkProposals: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'displayVideo_360AdvertiserLinkProposals'),
            listCustomDimensions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'customDimensions'),
            listCustomMetrics: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'customMetrics'),
            listDataStreams: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'dataStreams'),
            listAudiences: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'audiences'),
            listSearchAds360Links: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'searchAds_360Links'),
            listAccessBindings: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'accessBindings'),
            listExpandedDataSets: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'expandedDataSets'),
            listChannelGroups: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'channelGroups'),
            listBigQueryLinks: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'bigqueryLinks'),
            listAdSenseLinks: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'adsenseLinks'),
            listEventCreateRules: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'eventCreateRules'),
            listEventEditRules: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'eventEditRules'),
            listCalculatedMetrics: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'calculatedMetrics'),
            listRollupPropertySourceLinks: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'rollupPropertySourceLinks'),
            listSubpropertyEventFilters: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'subpropertyEventFilters'),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.analytics.admin.v1alpha.AnalyticsAdminService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.analyticsAdminServiceStub) {
            return this.analyticsAdminServiceStub;
        }
        // Put together the "service stub" for
        // google.analytics.admin.v1alpha.AnalyticsAdminService.
        this.analyticsAdminServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.analytics.admin.v1alpha.AnalyticsAdminService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.analytics.admin.v1alpha
                    .AnalyticsAdminService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const analyticsAdminServiceStubMethods = [
            'getAccount',
            'listAccounts',
            'deleteAccount',
            'updateAccount',
            'provisionAccountTicket',
            'listAccountSummaries',
            'getProperty',
            'listProperties',
            'createProperty',
            'deleteProperty',
            'updateProperty',
            'createFirebaseLink',
            'deleteFirebaseLink',
            'listFirebaseLinks',
            'getGlobalSiteTag',
            'createGoogleAdsLink',
            'updateGoogleAdsLink',
            'deleteGoogleAdsLink',
            'listGoogleAdsLinks',
            'getDataSharingSettings',
            'getMeasurementProtocolSecret',
            'listMeasurementProtocolSecrets',
            'createMeasurementProtocolSecret',
            'deleteMeasurementProtocolSecret',
            'updateMeasurementProtocolSecret',
            'acknowledgeUserDataCollection',
            'getSkAdNetworkConversionValueSchema',
            'createSkAdNetworkConversionValueSchema',
            'deleteSkAdNetworkConversionValueSchema',
            'updateSkAdNetworkConversionValueSchema',
            'listSkAdNetworkConversionValueSchemas',
            'searchChangeHistoryEvents',
            'getGoogleSignalsSettings',
            'updateGoogleSignalsSettings',
            'createConversionEvent',
            'updateConversionEvent',
            'getConversionEvent',
            'deleteConversionEvent',
            'listConversionEvents',
            'createKeyEvent',
            'updateKeyEvent',
            'getKeyEvent',
            'deleteKeyEvent',
            'listKeyEvents',
            'getDisplayVideo360AdvertiserLink',
            'listDisplayVideo360AdvertiserLinks',
            'createDisplayVideo360AdvertiserLink',
            'deleteDisplayVideo360AdvertiserLink',
            'updateDisplayVideo360AdvertiserLink',
            'getDisplayVideo360AdvertiserLinkProposal',
            'listDisplayVideo360AdvertiserLinkProposals',
            'createDisplayVideo360AdvertiserLinkProposal',
            'deleteDisplayVideo360AdvertiserLinkProposal',
            'approveDisplayVideo360AdvertiserLinkProposal',
            'cancelDisplayVideo360AdvertiserLinkProposal',
            'createCustomDimension',
            'updateCustomDimension',
            'listCustomDimensions',
            'archiveCustomDimension',
            'getCustomDimension',
            'createCustomMetric',
            'updateCustomMetric',
            'listCustomMetrics',
            'archiveCustomMetric',
            'getCustomMetric',
            'getDataRetentionSettings',
            'updateDataRetentionSettings',
            'createDataStream',
            'deleteDataStream',
            'updateDataStream',
            'listDataStreams',
            'getDataStream',
            'getAudience',
            'listAudiences',
            'createAudience',
            'updateAudience',
            'archiveAudience',
            'getSearchAds360Link',
            'listSearchAds360Links',
            'createSearchAds360Link',
            'deleteSearchAds360Link',
            'updateSearchAds360Link',
            'getAttributionSettings',
            'updateAttributionSettings',
            'runAccessReport',
            'createAccessBinding',
            'getAccessBinding',
            'updateAccessBinding',
            'deleteAccessBinding',
            'listAccessBindings',
            'batchCreateAccessBindings',
            'batchGetAccessBindings',
            'batchUpdateAccessBindings',
            'batchDeleteAccessBindings',
            'getExpandedDataSet',
            'listExpandedDataSets',
            'createExpandedDataSet',
            'updateExpandedDataSet',
            'deleteExpandedDataSet',
            'getChannelGroup',
            'listChannelGroups',
            'createChannelGroup',
            'updateChannelGroup',
            'deleteChannelGroup',
            'setAutomatedGa4ConfigurationOptOut',
            'fetchAutomatedGa4ConfigurationOptOut',
            'createBigQueryLink',
            'getBigQueryLink',
            'listBigQueryLinks',
            'deleteBigQueryLink',
            'updateBigQueryLink',
            'getEnhancedMeasurementSettings',
            'updateEnhancedMeasurementSettings',
            'createConnectedSiteTag',
            'deleteConnectedSiteTag',
            'listConnectedSiteTags',
            'fetchConnectedGa4Property',
            'getAdSenseLink',
            'createAdSenseLink',
            'deleteAdSenseLink',
            'listAdSenseLinks',
            'getEventCreateRule',
            'listEventCreateRules',
            'createEventCreateRule',
            'updateEventCreateRule',
            'deleteEventCreateRule',
            'getEventEditRule',
            'listEventEditRules',
            'createEventEditRule',
            'updateEventEditRule',
            'deleteEventEditRule',
            'reorderEventEditRules',
            'updateDataRedactionSettings',
            'getDataRedactionSettings',
            'getCalculatedMetric',
            'createCalculatedMetric',
            'listCalculatedMetrics',
            'updateCalculatedMetric',
            'deleteCalculatedMetric',
            'createRollupProperty',
            'getRollupPropertySourceLink',
            'listRollupPropertySourceLinks',
            'createRollupPropertySourceLink',
            'deleteRollupPropertySourceLink',
            'provisionSubproperty',
            'createSubpropertyEventFilter',
            'getSubpropertyEventFilter',
            'listSubpropertyEventFilters',
            'updateSubpropertyEventFilter',
            'deleteSubpropertyEventFilter',
        ];
        for (const methodName of analyticsAdminServiceStubMethods) {
            const callPromise = this.analyticsAdminServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] || undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.analyticsAdminServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'analyticsadmin.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'analyticsadmin.googleapis.com';
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint() {
        return this._servicePath;
    }
    get universeDomain() {
        return this._universeDomain;
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/analytics.edit',
            'https://www.googleapis.com/auth/analytics.manage.users',
            'https://www.googleapis.com/auth/analytics.manage.users.readonly',
            'https://www.googleapis.com/auth/analytics.readonly',
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getAccount(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getAccount(request, options, callback);
    }
    deleteAccount(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteAccount(request, options, callback);
    }
    updateAccount(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'account.name': (_a = request.account.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateAccount(request, options, callback);
    }
    provisionAccountTicket(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.provisionAccountTicket(request, options, callback);
    }
    getProperty(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getProperty(request, options, callback);
    }
    createProperty(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.createProperty(request, options, callback);
    }
    deleteProperty(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteProperty(request, options, callback);
    }
    updateProperty(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'property.name': (_a = request.property.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateProperty(request, options, callback);
    }
    createFirebaseLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createFirebaseLink(request, options, callback);
    }
    deleteFirebaseLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteFirebaseLink(request, options, callback);
    }
    getGlobalSiteTag(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getGlobalSiteTag(request, options, callback);
    }
    createGoogleAdsLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createGoogleAdsLink(request, options, callback);
    }
    updateGoogleAdsLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'google_ads_link.name': (_a = request.googleAdsLink.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateGoogleAdsLink(request, options, callback);
    }
    deleteGoogleAdsLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteGoogleAdsLink(request, options, callback);
    }
    getDataSharingSettings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getDataSharingSettings(request, options, callback);
    }
    getMeasurementProtocolSecret(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getMeasurementProtocolSecret(request, options, callback);
    }
    createMeasurementProtocolSecret(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createMeasurementProtocolSecret(request, options, callback);
    }
    deleteMeasurementProtocolSecret(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteMeasurementProtocolSecret(request, options, callback);
    }
    updateMeasurementProtocolSecret(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'measurement_protocol_secret.name': (_a = request.measurementProtocolSecret.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateMeasurementProtocolSecret(request, options, callback);
    }
    acknowledgeUserDataCollection(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                property: (_a = request.property) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.acknowledgeUserDataCollection(request, options, callback);
    }
    getSKAdNetworkConversionValueSchema(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getSkAdNetworkConversionValueSchema(request, options, callback);
    }
    createSKAdNetworkConversionValueSchema(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createSkAdNetworkConversionValueSchema(request, options, callback);
    }
    deleteSKAdNetworkConversionValueSchema(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteSkAdNetworkConversionValueSchema(request, options, callback);
    }
    updateSKAdNetworkConversionValueSchema(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'skadnetwork_conversion_value_schema.name': (_a = request.skadnetworkConversionValueSchema.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateSkAdNetworkConversionValueSchema(request, options, callback);
    }
    getGoogleSignalsSettings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getGoogleSignalsSettings(request, options, callback);
    }
    updateGoogleSignalsSettings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'google_signals_settings.name': (_a = request.googleSignalsSettings.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateGoogleSignalsSettings(request, options, callback);
    }
    createConversionEvent(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        this.warn('DEP$AnalyticsAdminService-$CreateConversionEvent', 'CreateConversionEvent is deprecated and may be removed in a future version.', 'DeprecationWarning');
        return this.innerApiCalls.createConversionEvent(request, options, callback);
    }
    updateConversionEvent(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'conversion_event.name': (_a = request.conversionEvent.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        this.warn('DEP$AnalyticsAdminService-$UpdateConversionEvent', 'UpdateConversionEvent is deprecated and may be removed in a future version.', 'DeprecationWarning');
        return this.innerApiCalls.updateConversionEvent(request, options, callback);
    }
    getConversionEvent(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        this.warn('DEP$AnalyticsAdminService-$GetConversionEvent', 'GetConversionEvent is deprecated and may be removed in a future version.', 'DeprecationWarning');
        return this.innerApiCalls.getConversionEvent(request, options, callback);
    }
    deleteConversionEvent(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        this.warn('DEP$AnalyticsAdminService-$DeleteConversionEvent', 'DeleteConversionEvent is deprecated and may be removed in a future version.', 'DeprecationWarning');
        return this.innerApiCalls.deleteConversionEvent(request, options, callback);
    }
    createKeyEvent(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createKeyEvent(request, options, callback);
    }
    updateKeyEvent(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'key_event.name': (_a = request.keyEvent.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateKeyEvent(request, options, callback);
    }
    getKeyEvent(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getKeyEvent(request, options, callback);
    }
    deleteKeyEvent(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteKeyEvent(request, options, callback);
    }
    getDisplayVideo360AdvertiserLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getDisplayVideo360AdvertiserLink(request, options, callback);
    }
    createDisplayVideo360AdvertiserLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createDisplayVideo360AdvertiserLink(request, options, callback);
    }
    deleteDisplayVideo360AdvertiserLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteDisplayVideo360AdvertiserLink(request, options, callback);
    }
    updateDisplayVideo360AdvertiserLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'display_video_360_advertiser_link.name': (_a = request.displayVideo_360AdvertiserLink.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateDisplayVideo360AdvertiserLink(request, options, callback);
    }
    getDisplayVideo360AdvertiserLinkProposal(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getDisplayVideo360AdvertiserLinkProposal(request, options, callback);
    }
    createDisplayVideo360AdvertiserLinkProposal(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createDisplayVideo360AdvertiserLinkProposal(request, options, callback);
    }
    deleteDisplayVideo360AdvertiserLinkProposal(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteDisplayVideo360AdvertiserLinkProposal(request, options, callback);
    }
    approveDisplayVideo360AdvertiserLinkProposal(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.approveDisplayVideo360AdvertiserLinkProposal(request, options, callback);
    }
    cancelDisplayVideo360AdvertiserLinkProposal(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.cancelDisplayVideo360AdvertiserLinkProposal(request, options, callback);
    }
    createCustomDimension(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createCustomDimension(request, options, callback);
    }
    updateCustomDimension(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'custom_dimension.name': (_a = request.customDimension.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateCustomDimension(request, options, callback);
    }
    archiveCustomDimension(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.archiveCustomDimension(request, options, callback);
    }
    getCustomDimension(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getCustomDimension(request, options, callback);
    }
    createCustomMetric(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createCustomMetric(request, options, callback);
    }
    updateCustomMetric(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'custom_metric.name': (_a = request.customMetric.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateCustomMetric(request, options, callback);
    }
    archiveCustomMetric(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.archiveCustomMetric(request, options, callback);
    }
    getCustomMetric(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getCustomMetric(request, options, callback);
    }
    getDataRetentionSettings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getDataRetentionSettings(request, options, callback);
    }
    updateDataRetentionSettings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'data_retention_settings.name': (_a = request.dataRetentionSettings.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateDataRetentionSettings(request, options, callback);
    }
    createDataStream(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createDataStream(request, options, callback);
    }
    deleteDataStream(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteDataStream(request, options, callback);
    }
    updateDataStream(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'data_stream.name': (_a = request.dataStream.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateDataStream(request, options, callback);
    }
    getDataStream(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getDataStream(request, options, callback);
    }
    getAudience(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getAudience(request, options, callback);
    }
    createAudience(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createAudience(request, options, callback);
    }
    updateAudience(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'audience.name': (_a = request.audience.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateAudience(request, options, callback);
    }
    archiveAudience(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.archiveAudience(request, options, callback);
    }
    getSearchAds360Link(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getSearchAds360Link(request, options, callback);
    }
    createSearchAds360Link(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createSearchAds360Link(request, options, callback);
    }
    deleteSearchAds360Link(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteSearchAds360Link(request, options, callback);
    }
    updateSearchAds360Link(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'search_ads_360_link.name': (_a = request.searchAds_360Link.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateSearchAds360Link(request, options, callback);
    }
    getAttributionSettings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getAttributionSettings(request, options, callback);
    }
    updateAttributionSettings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'attribution_settings.name': (_a = request.attributionSettings.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateAttributionSettings(request, options, callback);
    }
    runAccessReport(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                entity: (_a = request.entity) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.runAccessReport(request, options, callback);
    }
    createAccessBinding(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createAccessBinding(request, options, callback);
    }
    getAccessBinding(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getAccessBinding(request, options, callback);
    }
    updateAccessBinding(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'access_binding.name': (_a = request.accessBinding.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateAccessBinding(request, options, callback);
    }
    deleteAccessBinding(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteAccessBinding(request, options, callback);
    }
    batchCreateAccessBindings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.batchCreateAccessBindings(request, options, callback);
    }
    batchGetAccessBindings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.batchGetAccessBindings(request, options, callback);
    }
    batchUpdateAccessBindings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.batchUpdateAccessBindings(request, options, callback);
    }
    batchDeleteAccessBindings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.batchDeleteAccessBindings(request, options, callback);
    }
    getExpandedDataSet(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getExpandedDataSet(request, options, callback);
    }
    createExpandedDataSet(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createExpandedDataSet(request, options, callback);
    }
    updateExpandedDataSet(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'expanded_data_set.name': (_a = request.expandedDataSet.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateExpandedDataSet(request, options, callback);
    }
    deleteExpandedDataSet(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteExpandedDataSet(request, options, callback);
    }
    getChannelGroup(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getChannelGroup(request, options, callback);
    }
    createChannelGroup(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createChannelGroup(request, options, callback);
    }
    updateChannelGroup(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'channel_group.name': (_a = request.channelGroup.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateChannelGroup(request, options, callback);
    }
    deleteChannelGroup(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteChannelGroup(request, options, callback);
    }
    setAutomatedGa4ConfigurationOptOut(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.setAutomatedGa4ConfigurationOptOut(request, options, callback);
    }
    fetchAutomatedGa4ConfigurationOptOut(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.fetchAutomatedGa4ConfigurationOptOut(request, options, callback);
    }
    createBigQueryLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createBigQueryLink(request, options, callback);
    }
    getBigQueryLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getBigQueryLink(request, options, callback);
    }
    deleteBigQueryLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteBigQueryLink(request, options, callback);
    }
    updateBigQueryLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'bigquery_link.name': (_a = request.bigqueryLink.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateBigQueryLink(request, options, callback);
    }
    getEnhancedMeasurementSettings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getEnhancedMeasurementSettings(request, options, callback);
    }
    updateEnhancedMeasurementSettings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'enhanced_measurement_settings.name': (_a = request.enhancedMeasurementSettings.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateEnhancedMeasurementSettings(request, options, callback);
    }
    createConnectedSiteTag(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.createConnectedSiteTag(request, options, callback);
    }
    deleteConnectedSiteTag(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.deleteConnectedSiteTag(request, options, callback);
    }
    listConnectedSiteTags(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.listConnectedSiteTags(request, options, callback);
    }
    fetchConnectedGa4Property(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.fetchConnectedGa4Property(request, options, callback);
    }
    getAdSenseLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getAdSenseLink(request, options, callback);
    }
    createAdSenseLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createAdSenseLink(request, options, callback);
    }
    deleteAdSenseLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteAdSenseLink(request, options, callback);
    }
    getEventCreateRule(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getEventCreateRule(request, options, callback);
    }
    createEventCreateRule(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createEventCreateRule(request, options, callback);
    }
    updateEventCreateRule(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'event_create_rule.name': (_a = request.eventCreateRule.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateEventCreateRule(request, options, callback);
    }
    deleteEventCreateRule(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteEventCreateRule(request, options, callback);
    }
    getEventEditRule(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getEventEditRule(request, options, callback);
    }
    createEventEditRule(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createEventEditRule(request, options, callback);
    }
    updateEventEditRule(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'event_edit_rule.name': (_a = request.eventEditRule.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateEventEditRule(request, options, callback);
    }
    deleteEventEditRule(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteEventEditRule(request, options, callback);
    }
    reorderEventEditRules(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.reorderEventEditRules(request, options, callback);
    }
    updateDataRedactionSettings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'data_redaction_settings.name': (_a = request.dataRedactionSettings.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateDataRedactionSettings(request, options, callback);
    }
    getDataRedactionSettings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getDataRedactionSettings(request, options, callback);
    }
    getCalculatedMetric(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getCalculatedMetric(request, options, callback);
    }
    createCalculatedMetric(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createCalculatedMetric(request, options, callback);
    }
    updateCalculatedMetric(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'calculated_metric.name': (_a = request.calculatedMetric.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateCalculatedMetric(request, options, callback);
    }
    deleteCalculatedMetric(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteCalculatedMetric(request, options, callback);
    }
    createRollupProperty(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.createRollupProperty(request, options, callback);
    }
    getRollupPropertySourceLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getRollupPropertySourceLink(request, options, callback);
    }
    createRollupPropertySourceLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createRollupPropertySourceLink(request, options, callback);
    }
    deleteRollupPropertySourceLink(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteRollupPropertySourceLink(request, options, callback);
    }
    provisionSubproperty(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.provisionSubproperty(request, options, callback);
    }
    createSubpropertyEventFilter(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createSubpropertyEventFilter(request, options, callback);
    }
    getSubpropertyEventFilter(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getSubpropertyEventFilter(request, options, callback);
    }
    updateSubpropertyEventFilter(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'subproperty_event_filter.name': (_a = request.subpropertyEventFilter.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateSubpropertyEventFilter(request, options, callback);
    }
    deleteSubpropertyEventFilter(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteSubpropertyEventFilter(request, options, callback);
    }
    listAccounts(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.listAccounts(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {number} request.pageSize
     *   The maximum number of resources to return. The service may return
     *   fewer than this value, even if there are additional pages.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListAccounts` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListAccounts` must
     *   match the call that provided the page token.
     * @param {boolean} request.showDeleted
     *   Whether to include soft-deleted (ie: "trashed") Accounts in the
     *   results. Accounts can be inspected to determine whether they are deleted or
     *   not.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.Account|Account} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAccountsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAccountsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const defaultCallSettings = this._defaults['listAccounts'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAccounts.createStream(this.innerApiCalls.listAccounts, request, callSettings);
    }
    /**
     * Equivalent to `listAccounts`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {number} request.pageSize
     *   The maximum number of resources to return. The service may return
     *   fewer than this value, even if there are additional pages.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListAccounts` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListAccounts` must
     *   match the call that provided the page token.
     * @param {boolean} request.showDeleted
     *   Whether to include soft-deleted (ie: "trashed") Accounts in the
     *   results. Accounts can be inspected to determine whether they are deleted or
     *   not.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.Account|Account}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_accounts.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListAccounts_async
     */
    listAccountsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const defaultCallSettings = this._defaults['listAccounts'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAccounts.asyncIterate(this.innerApiCalls['listAccounts'], request, callSettings);
    }
    listAccountSummaries(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.listAccountSummaries(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {number} request.pageSize
     *   The maximum number of AccountSummary resources to return. The service may
     *   return fewer than this value, even if there are additional pages.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListAccountSummaries` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListAccountSummaries`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.AccountSummary|AccountSummary} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAccountSummariesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAccountSummariesStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const defaultCallSettings = this._defaults['listAccountSummaries'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAccountSummaries.createStream(this.innerApiCalls.listAccountSummaries, request, callSettings);
    }
    /**
     * Equivalent to `listAccountSummaries`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {number} request.pageSize
     *   The maximum number of AccountSummary resources to return. The service may
     *   return fewer than this value, even if there are additional pages.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListAccountSummaries` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListAccountSummaries`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.AccountSummary|AccountSummary}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_account_summaries.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListAccountSummaries_async
     */
    listAccountSummariesAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const defaultCallSettings = this._defaults['listAccountSummaries'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAccountSummaries.asyncIterate(this.innerApiCalls['listAccountSummaries'], request, callSettings);
    }
    listProperties(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.listProperties(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.filter
     *   Required. An expression for filtering the results of the request.
     *   Fields eligible for filtering are:
     *   `parent:`(The resource name of the parent account/property) or
     *   `ancestor:`(The resource name of the parent account) or
     *   `firebase_project:`(The id or number of the linked firebase project).
     *   Some examples of filters:
     *
     *   ```
     *   | Filter                      | Description                               |
     *   |-----------------------------|-------------------------------------------|
     *   | parent:accounts/123         | The account with account id: 123.       |
     *   | parent:properties/123       | The property with property id: 123.       |
     *   | ancestor:accounts/123       | The account with account id: 123.         |
     *   | firebase_project:project-id | The firebase project with id: project-id. |
     *   | firebase_project:123        | The firebase project with number: 123.    |
     *   ```
     * @param {number} request.pageSize
     *   The maximum number of resources to return. The service may return
     *   fewer than this value, even if there are additional pages.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListProperties` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListProperties` must
     *   match the call that provided the page token.
     * @param {boolean} request.showDeleted
     *   Whether to include soft-deleted (ie: "trashed") Properties in the
     *   results. Properties can be inspected to determine whether they are deleted
     *   or not.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.Property|Property} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listPropertiesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPropertiesStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const defaultCallSettings = this._defaults['listProperties'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listProperties.createStream(this.innerApiCalls.listProperties, request, callSettings);
    }
    /**
     * Equivalent to `listProperties`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.filter
     *   Required. An expression for filtering the results of the request.
     *   Fields eligible for filtering are:
     *   `parent:`(The resource name of the parent account/property) or
     *   `ancestor:`(The resource name of the parent account) or
     *   `firebase_project:`(The id or number of the linked firebase project).
     *   Some examples of filters:
     *
     *   ```
     *   | Filter                      | Description                               |
     *   |-----------------------------|-------------------------------------------|
     *   | parent:accounts/123         | The account with account id: 123.       |
     *   | parent:properties/123       | The property with property id: 123.       |
     *   | ancestor:accounts/123       | The account with account id: 123.         |
     *   | firebase_project:project-id | The firebase project with id: project-id. |
     *   | firebase_project:123        | The firebase project with number: 123.    |
     *   ```
     * @param {number} request.pageSize
     *   The maximum number of resources to return. The service may return
     *   fewer than this value, even if there are additional pages.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListProperties` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListProperties` must
     *   match the call that provided the page token.
     * @param {boolean} request.showDeleted
     *   Whether to include soft-deleted (ie: "trashed") Properties in the
     *   results. Properties can be inspected to determine whether they are deleted
     *   or not.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.Property|Property}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_properties.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListProperties_async
     */
    listPropertiesAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const defaultCallSettings = this._defaults['listProperties'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listProperties.asyncIterate(this.innerApiCalls['listProperties'], request, callSettings);
    }
    listFirebaseLinks(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listFirebaseLinks(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format: properties/{property_id}
     *
     *   Example: `properties/1234`
     * @param {number} request.pageSize
     *   The maximum number of resources to return. The service may return
     *   fewer than this value, even if there are additional pages.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListFirebaseLinks` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListFirebaseLinks` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.FirebaseLink|FirebaseLink} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listFirebaseLinksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listFirebaseLinksStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listFirebaseLinks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listFirebaseLinks.createStream(this.innerApiCalls.listFirebaseLinks, request, callSettings);
    }
    /**
     * Equivalent to `listFirebaseLinks`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format: properties/{property_id}
     *
     *   Example: `properties/1234`
     * @param {number} request.pageSize
     *   The maximum number of resources to return. The service may return
     *   fewer than this value, even if there are additional pages.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListFirebaseLinks` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListFirebaseLinks` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.FirebaseLink|FirebaseLink}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_firebase_links.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListFirebaseLinks_async
     */
    listFirebaseLinksAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listFirebaseLinks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listFirebaseLinks.asyncIterate(this.innerApiCalls['listFirebaseLinks'], request, callSettings);
    }
    listGoogleAdsLinks(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listGoogleAdsLinks(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListGoogleAdsLinks` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListGoogleAdsLinks` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.GoogleAdsLink|GoogleAdsLink} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listGoogleAdsLinksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listGoogleAdsLinksStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listGoogleAdsLinks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listGoogleAdsLinks.createStream(this.innerApiCalls.listGoogleAdsLinks, request, callSettings);
    }
    /**
     * Equivalent to `listGoogleAdsLinks`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListGoogleAdsLinks` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListGoogleAdsLinks` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.GoogleAdsLink|GoogleAdsLink}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_google_ads_links.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListGoogleAdsLinks_async
     */
    listGoogleAdsLinksAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listGoogleAdsLinks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listGoogleAdsLinks.asyncIterate(this.innerApiCalls['listGoogleAdsLinks'], request, callSettings);
    }
    listMeasurementProtocolSecrets(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listMeasurementProtocolSecrets(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent stream.
     *   Format:
     *   properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 10 resources will be returned.
     *   The maximum value is 10. Higher values will be coerced to the maximum.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListMeasurementProtocolSecrets`
     *   call. Provide this to retrieve the subsequent page. When paginating, all
     *   other parameters provided to `ListMeasurementProtocolSecrets` must match
     *   the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret|MeasurementProtocolSecret} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listMeasurementProtocolSecretsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listMeasurementProtocolSecretsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listMeasurementProtocolSecrets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listMeasurementProtocolSecrets.createStream(this.innerApiCalls.listMeasurementProtocolSecrets, request, callSettings);
    }
    /**
     * Equivalent to `listMeasurementProtocolSecrets`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent stream.
     *   Format:
     *   properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 10 resources will be returned.
     *   The maximum value is 10. Higher values will be coerced to the maximum.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListMeasurementProtocolSecrets`
     *   call. Provide this to retrieve the subsequent page. When paginating, all
     *   other parameters provided to `ListMeasurementProtocolSecrets` must match
     *   the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret|MeasurementProtocolSecret}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_measurement_protocol_secrets.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListMeasurementProtocolSecrets_async
     */
    listMeasurementProtocolSecretsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listMeasurementProtocolSecrets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listMeasurementProtocolSecrets.asyncIterate(this.innerApiCalls['listMeasurementProtocolSecrets'], request, callSettings);
    }
    listSKAdNetworkConversionValueSchemas(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listSkAdNetworkConversionValueSchemas(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The DataStream resource to list schemas for.
     *   Format:
     *   properties/{property_id}/dataStreams/{dataStream}
     *   Example: properties/1234/dataStreams/5678
     * @param {number} request.pageSize
     *   The maximum number of resources to return. The service may return
     *   fewer than this value, even if there are additional pages.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous
     *   `ListSKAdNetworkConversionValueSchemas` call. Provide this to retrieve the
     *   subsequent page. When paginating, all other parameters provided to
     *   `ListSKAdNetworkConversionValueSchema` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.SKAdNetworkConversionValueSchema|SKAdNetworkConversionValueSchema} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSKAdNetworkConversionValueSchemasAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSKAdNetworkConversionValueSchemasStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listSkAdNetworkConversionValueSchemas'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listSKAdNetworkConversionValueSchemas.createStream(this.innerApiCalls.listSkAdNetworkConversionValueSchemas, request, callSettings);
    }
    /**
     * Equivalent to `listSKAdNetworkConversionValueSchemas`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The DataStream resource to list schemas for.
     *   Format:
     *   properties/{property_id}/dataStreams/{dataStream}
     *   Example: properties/1234/dataStreams/5678
     * @param {number} request.pageSize
     *   The maximum number of resources to return. The service may return
     *   fewer than this value, even if there are additional pages.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous
     *   `ListSKAdNetworkConversionValueSchemas` call. Provide this to retrieve the
     *   subsequent page. When paginating, all other parameters provided to
     *   `ListSKAdNetworkConversionValueSchema` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.SKAdNetworkConversionValueSchema|SKAdNetworkConversionValueSchema}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_s_k_ad_network_conversion_value_schemas.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListSKAdNetworkConversionValueSchemas_async
     */
    listSKAdNetworkConversionValueSchemasAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listSkAdNetworkConversionValueSchemas'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listSKAdNetworkConversionValueSchemas.asyncIterate(this.innerApiCalls['listSkAdNetworkConversionValueSchemas'], request, callSettings);
    }
    searchChangeHistoryEvents(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                account: (_a = request.account) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.searchChangeHistoryEvents(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.account
     *   Required. The account resource for which to return change history
     *   resources. Format: accounts/{account}
     *
     *   Example: `accounts/100`
     * @param {string} [request.property]
     *   Optional. Resource name for a child property. If set, only return changes
     *   made to this property or its child resources.
     *   Format: properties/{propertyId}
     *
     *   Example: `properties/100`
     * @param {number[]} [request.resourceType]
     *   Optional. If set, only return changes if they are for a resource that
     *   matches at least one of these types.
     * @param {number[]} [request.action]
     *   Optional. If set, only return changes that match one or more of these types
     *   of actions.
     * @param {string[]} [request.actorEmail]
     *   Optional. If set, only return changes if they are made by a user in this
     *   list.
     * @param {google.protobuf.Timestamp} [request.earliestChangeTime]
     *   Optional. If set, only return changes made after this time (inclusive).
     * @param {google.protobuf.Timestamp} [request.latestChangeTime]
     *   Optional. If set, only return changes made before this time (inclusive).
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of ChangeHistoryEvent items to return.
     *   The service may return fewer than this value, even if there are additional
     *   pages. If unspecified, at most 50 items will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous
     *   `SearchChangeHistoryEvents` call. Provide this to retrieve the subsequent
     *   page. When paginating, all other parameters provided to
     *   `SearchChangeHistoryEvents` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.ChangeHistoryEvent|ChangeHistoryEvent} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `searchChangeHistoryEventsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    searchChangeHistoryEventsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                account: (_a = request.account) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['searchChangeHistoryEvents'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.searchChangeHistoryEvents.createStream(this.innerApiCalls.searchChangeHistoryEvents, request, callSettings);
    }
    /**
     * Equivalent to `searchChangeHistoryEvents`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.account
     *   Required. The account resource for which to return change history
     *   resources. Format: accounts/{account}
     *
     *   Example: `accounts/100`
     * @param {string} [request.property]
     *   Optional. Resource name for a child property. If set, only return changes
     *   made to this property or its child resources.
     *   Format: properties/{propertyId}
     *
     *   Example: `properties/100`
     * @param {number[]} [request.resourceType]
     *   Optional. If set, only return changes if they are for a resource that
     *   matches at least one of these types.
     * @param {number[]} [request.action]
     *   Optional. If set, only return changes that match one or more of these types
     *   of actions.
     * @param {string[]} [request.actorEmail]
     *   Optional. If set, only return changes if they are made by a user in this
     *   list.
     * @param {google.protobuf.Timestamp} [request.earliestChangeTime]
     *   Optional. If set, only return changes made after this time (inclusive).
     * @param {google.protobuf.Timestamp} [request.latestChangeTime]
     *   Optional. If set, only return changes made before this time (inclusive).
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of ChangeHistoryEvent items to return.
     *   The service may return fewer than this value, even if there are additional
     *   pages. If unspecified, at most 50 items will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous
     *   `SearchChangeHistoryEvents` call. Provide this to retrieve the subsequent
     *   page. When paginating, all other parameters provided to
     *   `SearchChangeHistoryEvents` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.ChangeHistoryEvent|ChangeHistoryEvent}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.search_change_history_events.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_SearchChangeHistoryEvents_async
     */
    searchChangeHistoryEventsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                account: (_a = request.account) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['searchChangeHistoryEvents'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.searchChangeHistoryEvents.asyncIterate(this.innerApiCalls['searchChangeHistoryEvents'], request, callSettings);
    }
    listConversionEvents(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        this.warn('DEP$AnalyticsAdminService-$ListConversionEvents', 'ListConversionEvents is deprecated and may be removed in a future version.', 'DeprecationWarning');
        return this.innerApiCalls.listConversionEvents(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent property.
     *   Example: 'properties/123'
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListConversionEvents` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListConversionEvents`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.ConversionEvent|ConversionEvent} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listConversionEventsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @deprecated ListConversionEvents is deprecated and may be removed in a future version.
     */
    listConversionEventsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listConversionEvents'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        this.warn('DEP$AnalyticsAdminService-$ListConversionEvents', 'ListConversionEvents is deprecated and may be removed in a future version.', 'DeprecationWarning');
        return this.descriptors.page.listConversionEvents.createStream(this.innerApiCalls.listConversionEvents, request, callSettings);
    }
    /**
     * Equivalent to `listConversionEvents`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent property.
     *   Example: 'properties/123'
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListConversionEvents` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListConversionEvents`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.ConversionEvent|ConversionEvent}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_conversion_events.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListConversionEvents_async
     * @deprecated ListConversionEvents is deprecated and may be removed in a future version.
     */
    listConversionEventsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listConversionEvents'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        this.warn('DEP$AnalyticsAdminService-$ListConversionEvents', 'ListConversionEvents is deprecated and may be removed in a future version.', 'DeprecationWarning');
        return this.descriptors.page.listConversionEvents.asyncIterate(this.innerApiCalls['listConversionEvents'], request, callSettings);
    }
    listKeyEvents(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listKeyEvents(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent property.
     *   Example: 'properties/123'
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListKeyEvents` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListKeyEvents`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.KeyEvent|KeyEvent} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listKeyEventsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listKeyEventsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listKeyEvents'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listKeyEvents.createStream(this.innerApiCalls.listKeyEvents, request, callSettings);
    }
    /**
     * Equivalent to `listKeyEvents`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent property.
     *   Example: 'properties/123'
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListKeyEvents` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListKeyEvents`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.KeyEvent|KeyEvent}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_key_events.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListKeyEvents_async
     */
    listKeyEventsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listKeyEvents'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listKeyEvents.asyncIterate(this.innerApiCalls['listKeyEvents'], request, callSettings);
    }
    listDisplayVideo360AdvertiserLinks(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listDisplayVideo360AdvertiserLinks(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListDisplayVideo360AdvertiserLinks`
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListDisplayVideo360AdvertiserLinks` must match the call that provided the
     *   page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink|DisplayVideo360AdvertiserLink} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDisplayVideo360AdvertiserLinksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDisplayVideo360AdvertiserLinksStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDisplayVideo360AdvertiserLinks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDisplayVideo360AdvertiserLinks.createStream(this.innerApiCalls.listDisplayVideo360AdvertiserLinks, request, callSettings);
    }
    /**
     * Equivalent to `listDisplayVideo360AdvertiserLinks`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListDisplayVideo360AdvertiserLinks`
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListDisplayVideo360AdvertiserLinks` must match the call that provided the
     *   page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink|DisplayVideo360AdvertiserLink}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_display_video360_advertiser_links.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListDisplayVideo360AdvertiserLinks_async
     */
    listDisplayVideo360AdvertiserLinksAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDisplayVideo360AdvertiserLinks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDisplayVideo360AdvertiserLinks.asyncIterate(this.innerApiCalls['listDisplayVideo360AdvertiserLinks'], request, callSettings);
    }
    listDisplayVideo360AdvertiserLinkProposals(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listDisplayVideo360AdvertiserLinkProposals(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous
     *   `ListDisplayVideo360AdvertiserLinkProposals` call. Provide this to retrieve
     *   the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListDisplayVideo360AdvertiserLinkProposals` must match the call that
     *   provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal|DisplayVideo360AdvertiserLinkProposal} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDisplayVideo360AdvertiserLinkProposalsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDisplayVideo360AdvertiserLinkProposalsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDisplayVideo360AdvertiserLinkProposals'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDisplayVideo360AdvertiserLinkProposals.createStream(this.innerApiCalls.listDisplayVideo360AdvertiserLinkProposals, request, callSettings);
    }
    /**
     * Equivalent to `listDisplayVideo360AdvertiserLinkProposals`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous
     *   `ListDisplayVideo360AdvertiserLinkProposals` call. Provide this to retrieve
     *   the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListDisplayVideo360AdvertiserLinkProposals` must match the call that
     *   provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal|DisplayVideo360AdvertiserLinkProposal}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_display_video360_advertiser_link_proposals.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListDisplayVideo360AdvertiserLinkProposals_async
     */
    listDisplayVideo360AdvertiserLinkProposalsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDisplayVideo360AdvertiserLinkProposals'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDisplayVideo360AdvertiserLinkProposals.asyncIterate(this.innerApiCalls['listDisplayVideo360AdvertiserLinkProposals'], request, callSettings);
    }
    listCustomDimensions(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listCustomDimensions(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListCustomDimensions` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListCustomDimensions`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.CustomDimension|CustomDimension} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCustomDimensionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCustomDimensionsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCustomDimensions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCustomDimensions.createStream(this.innerApiCalls.listCustomDimensions, request, callSettings);
    }
    /**
     * Equivalent to `listCustomDimensions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListCustomDimensions` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListCustomDimensions`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.CustomDimension|CustomDimension}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_custom_dimensions.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListCustomDimensions_async
     */
    listCustomDimensionsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCustomDimensions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCustomDimensions.asyncIterate(this.innerApiCalls['listCustomDimensions'], request, callSettings);
    }
    listCustomMetrics(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listCustomMetrics(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListCustomMetrics` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListCustomMetrics` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.CustomMetric|CustomMetric} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCustomMetricsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCustomMetricsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCustomMetrics'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCustomMetrics.createStream(this.innerApiCalls.listCustomMetrics, request, callSettings);
    }
    /**
     * Equivalent to `listCustomMetrics`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListCustomMetrics` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListCustomMetrics` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.CustomMetric|CustomMetric}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_custom_metrics.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListCustomMetrics_async
     */
    listCustomMetricsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCustomMetrics'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCustomMetrics.asyncIterate(this.innerApiCalls['listCustomMetrics'], request, callSettings);
    }
    listDataStreams(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listDataStreams(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListDataStreams` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListDataStreams` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.DataStream|DataStream} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDataStreamsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDataStreamsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDataStreams'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDataStreams.createStream(this.innerApiCalls.listDataStreams, request, callSettings);
    }
    /**
     * Equivalent to `listDataStreams`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListDataStreams` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListDataStreams` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.DataStream|DataStream}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_data_streams.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListDataStreams_async
     */
    listDataStreamsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDataStreams'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDataStreams.asyncIterate(this.innerApiCalls['listDataStreams'], request, callSettings);
    }
    listAudiences(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listAudiences(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListAudiences` call. Provide this
     *   to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListAudiences` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.Audience|Audience} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAudiencesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAudiencesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAudiences'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAudiences.createStream(this.innerApiCalls.listAudiences, request, callSettings);
    }
    /**
     * Equivalent to `listAudiences`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListAudiences` call. Provide this
     *   to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListAudiences` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.Audience|Audience}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_audiences.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListAudiences_async
     */
    listAudiencesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAudiences'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAudiences.asyncIterate(this.innerApiCalls['listAudiences'], request, callSettings);
    }
    listSearchAds360Links(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listSearchAds360Links(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListSearchAds360Links`
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListSearchAds360Links` must match the call that provided the
     *   page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.SearchAds360Link|SearchAds360Link} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSearchAds360LinksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSearchAds360LinksStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listSearchAds360Links'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listSearchAds360Links.createStream(this.innerApiCalls.listSearchAds360Links, request, callSettings);
    }
    /**
     * Equivalent to `listSearchAds360Links`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListSearchAds360Links`
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListSearchAds360Links` must match the call that provided the
     *   page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.SearchAds360Link|SearchAds360Link}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_search_ads360_links.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListSearchAds360Links_async
     */
    listSearchAds360LinksAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listSearchAds360Links'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listSearchAds360Links.asyncIterate(this.innerApiCalls['listSearchAds360Links'], request, callSettings);
    }
    listAccessBindings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listAccessBindings(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Formats:
     *   - accounts/{account}
     *   - properties/{property}
     * @param {number} request.pageSize
     *   The maximum number of access bindings to return.
     *   The service may return fewer than this value.
     *   If unspecified, at most 200 access bindings will be returned.
     *   The maximum value is 500; values above 500 will be coerced to 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListAccessBindings` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListAccessBindings` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.AccessBinding|AccessBinding} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAccessBindingsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAccessBindingsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAccessBindings'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAccessBindings.createStream(this.innerApiCalls.listAccessBindings, request, callSettings);
    }
    /**
     * Equivalent to `listAccessBindings`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Formats:
     *   - accounts/{account}
     *   - properties/{property}
     * @param {number} request.pageSize
     *   The maximum number of access bindings to return.
     *   The service may return fewer than this value.
     *   If unspecified, at most 200 access bindings will be returned.
     *   The maximum value is 500; values above 500 will be coerced to 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListAccessBindings` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListAccessBindings` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.AccessBinding|AccessBinding}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_access_bindings.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListAccessBindings_async
     */
    listAccessBindingsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAccessBindings'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAccessBindings.asyncIterate(this.innerApiCalls['listAccessBindings'], request, callSettings);
    }
    listExpandedDataSets(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listExpandedDataSets(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListExpandedDataSets` call. Provide
     *   this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListExpandedDataSet`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.ExpandedDataSet|ExpandedDataSet} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listExpandedDataSetsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listExpandedDataSetsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listExpandedDataSets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listExpandedDataSets.createStream(this.innerApiCalls.listExpandedDataSets, request, callSettings);
    }
    /**
     * Equivalent to `listExpandedDataSets`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListExpandedDataSets` call. Provide
     *   this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListExpandedDataSet`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.ExpandedDataSet|ExpandedDataSet}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_expanded_data_sets.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListExpandedDataSets_async
     */
    listExpandedDataSetsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listExpandedDataSets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listExpandedDataSets.asyncIterate(this.innerApiCalls['listExpandedDataSets'], request, callSettings);
    }
    listChannelGroups(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listChannelGroups(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The property for which to list ChannelGroups.
     *   Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListChannelGroups` call. Provide
     *   this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListChannelGroups`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.ChannelGroup|ChannelGroup} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listChannelGroupsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listChannelGroupsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listChannelGroups'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listChannelGroups.createStream(this.innerApiCalls.listChannelGroups, request, callSettings);
    }
    /**
     * Equivalent to `listChannelGroups`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The property for which to list ChannelGroups.
     *   Example format: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListChannelGroups` call. Provide
     *   this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListChannelGroups`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.ChannelGroup|ChannelGroup}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_channel_groups.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListChannelGroups_async
     */
    listChannelGroupsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listChannelGroups'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listChannelGroups.asyncIterate(this.innerApiCalls['listChannelGroups'], request, callSettings);
    }
    listBigQueryLinks(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listBigQueryLinks(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the property to list BigQuery links under.
     *   Format: properties/{property_id}
     *   Example: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return. The service may return
     *   fewer than this value, even if there are additional pages.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListBigQueryLinks` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListBigQueryLinks` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.BigQueryLink|BigQueryLink} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listBigQueryLinksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBigQueryLinksStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listBigQueryLinks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listBigQueryLinks.createStream(this.innerApiCalls.listBigQueryLinks, request, callSettings);
    }
    /**
     * Equivalent to `listBigQueryLinks`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the property to list BigQuery links under.
     *   Format: properties/{property_id}
     *   Example: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return. The service may return
     *   fewer than this value, even if there are additional pages.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListBigQueryLinks` call.
     *   Provide this to retrieve the subsequent page.
     *   When paginating, all other parameters provided to `ListBigQueryLinks` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.BigQueryLink|BigQueryLink}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_big_query_links.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListBigQueryLinks_async
     */
    listBigQueryLinksAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listBigQueryLinks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listBigQueryLinks.asyncIterate(this.innerApiCalls['listBigQueryLinks'], request, callSettings);
    }
    listAdSenseLinks(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listAdSenseLinks(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the parent property.
     *   Format: properties/{propertyId}
     *   Example: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token received from a previous `ListAdSenseLinks` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListAdSenseLinks` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.AdSenseLink|AdSenseLink} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAdSenseLinksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAdSenseLinksStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAdSenseLinks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAdSenseLinks.createStream(this.innerApiCalls.listAdSenseLinks, request, callSettings);
    }
    /**
     * Equivalent to `listAdSenseLinks`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the parent property.
     *   Format: properties/{propertyId}
     *   Example: properties/1234
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token received from a previous `ListAdSenseLinks` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListAdSenseLinks` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.AdSenseLink|AdSenseLink}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_ad_sense_links.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListAdSenseLinks_async
     */
    listAdSenseLinksAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAdSenseLinks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAdSenseLinks.asyncIterate(this.innerApiCalls['listAdSenseLinks'], request, callSettings);
    }
    listEventCreateRules(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listEventCreateRules(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/123/dataStreams/456
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListEventCreateRules` call. Provide
     *   this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListEventCreateRules`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.EventCreateRule|EventCreateRule} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listEventCreateRulesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listEventCreateRulesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listEventCreateRules'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listEventCreateRules.createStream(this.innerApiCalls.listEventCreateRules, request, callSettings);
    }
    /**
     * Equivalent to `listEventCreateRules`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/123/dataStreams/456
     * @param {number} request.pageSize
     *   The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListEventCreateRules` call. Provide
     *   this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListEventCreateRules`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.EventCreateRule|EventCreateRule}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_event_create_rules.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListEventCreateRules_async
     */
    listEventCreateRulesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listEventCreateRules'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listEventCreateRules.asyncIterate(this.innerApiCalls['listEventCreateRules'], request, callSettings);
    }
    listEventEditRules(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listEventEditRules(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/123/dataStreams/456
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListEventEditRules` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListEventEditRules`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.EventEditRule|EventEditRule} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listEventEditRulesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listEventEditRulesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listEventEditRules'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listEventEditRules.createStream(this.innerApiCalls.listEventEditRules, request, callSettings);
    }
    /**
     * Equivalent to `listEventEditRules`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/123/dataStreams/456
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListEventEditRules` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListEventEditRules`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.EventEditRule|EventEditRule}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_event_edit_rules.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListEventEditRules_async
     */
    listEventEditRulesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listEventEditRules'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listEventEditRules.asyncIterate(this.innerApiCalls['listEventEditRules'], request, callSettings);
    }
    listCalculatedMetrics(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listCalculatedMetrics(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListCalculatedMetrics`
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListCalculatedMetrics`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.CalculatedMetric|CalculatedMetric} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCalculatedMetricsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCalculatedMetricsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCalculatedMetrics'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCalculatedMetrics.createStream(this.innerApiCalls.listCalculatedMetrics, request, callSettings);
    }
    /**
     * Equivalent to `listCalculatedMetrics`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example format: properties/1234
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of resources to return.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200 (higher values will be coerced to the maximum).
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListCalculatedMetrics`
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListCalculatedMetrics`
     *   must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.CalculatedMetric|CalculatedMetric}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_calculated_metrics.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListCalculatedMetrics_async
     */
    listCalculatedMetricsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCalculatedMetrics'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCalculatedMetrics.asyncIterate(this.innerApiCalls['listCalculatedMetrics'], request, callSettings);
    }
    listRollupPropertySourceLinks(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listRollupPropertySourceLinks(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the roll-up property to list roll-up property source
     *   links under. Format: properties/{property_id} Example: properties/1234
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of resources to return. The service may return
     *   fewer than this value, even if there are additional pages.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous
     *   `ListRollupPropertySourceLinks` call. Provide this to retrieve the
     *   subsequent page. When paginating, all other parameters provided to
     *   `ListRollupPropertySourceLinks` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.RollupPropertySourceLink|RollupPropertySourceLink} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listRollupPropertySourceLinksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listRollupPropertySourceLinksStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listRollupPropertySourceLinks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRollupPropertySourceLinks.createStream(this.innerApiCalls.listRollupPropertySourceLinks, request, callSettings);
    }
    /**
     * Equivalent to `listRollupPropertySourceLinks`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the roll-up property to list roll-up property source
     *   links under. Format: properties/{property_id} Example: properties/1234
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of resources to return. The service may return
     *   fewer than this value, even if there are additional pages.
     *   If unspecified, at most 50 resources will be returned.
     *   The maximum value is 200; (higher values will be coerced to the maximum)
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous
     *   `ListRollupPropertySourceLinks` call. Provide this to retrieve the
     *   subsequent page. When paginating, all other parameters provided to
     *   `ListRollupPropertySourceLinks` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.RollupPropertySourceLink|RollupPropertySourceLink}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_rollup_property_source_links.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListRollupPropertySourceLinks_async
     */
    listRollupPropertySourceLinksAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listRollupPropertySourceLinks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRollupPropertySourceLinks.asyncIterate(this.innerApiCalls['listRollupPropertySourceLinks'], request, callSettings);
    }
    listSubpropertyEventFilters(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listSubpropertyEventFilters(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the ordinary property.
     *   Format: properties/property_id
     *   Example: properties/123
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of resources to return. The service may return
     *   fewer than this value, even if there are additional pages. If unspecified,
     *   at most 50 resources will be returned. The maximum value is 200; (higher
     *   values will be coerced to the maximum)
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous
     *   `ListSubpropertyEventFilters` call. Provide this to retrieve the subsequent
     *   page. When paginating, all other parameters provided to
     *   `ListSubpropertyEventFilters` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.analytics.admin.v1alpha.SubpropertyEventFilter|SubpropertyEventFilter} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSubpropertyEventFiltersAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSubpropertyEventFiltersStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listSubpropertyEventFilters'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listSubpropertyEventFilters.createStream(this.innerApiCalls.listSubpropertyEventFilters, request, callSettings);
    }
    /**
     * Equivalent to `listSubpropertyEventFilters`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the ordinary property.
     *   Format: properties/property_id
     *   Example: properties/123
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of resources to return. The service may return
     *   fewer than this value, even if there are additional pages. If unspecified,
     *   at most 50 resources will be returned. The maximum value is 200; (higher
     *   values will be coerced to the maximum)
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous
     *   `ListSubpropertyEventFilters` call. Provide this to retrieve the subsequent
     *   page. When paginating, all other parameters provided to
     *   `ListSubpropertyEventFilters` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.analytics.admin.v1alpha.SubpropertyEventFilter|SubpropertyEventFilter}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/analytics_admin_service.list_subproperty_event_filters.js</caption>
     * region_tag:analyticsadmin_v1alpha_generated_AnalyticsAdminService_ListSubpropertyEventFilters_async
     */
    listSubpropertyEventFiltersAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listSubpropertyEventFilters'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listSubpropertyEventFilters.asyncIterate(this.innerApiCalls['listSubpropertyEventFilters'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified account resource name string.
     *
     * @param {string} account
     * @returns {string} Resource name string.
     */
    accountPath(account) {
        return this.pathTemplates.accountPathTemplate.render({
            account: account,
        });
    }
    /**
     * Parse the account from Account resource.
     *
     * @param {string} accountName
     *   A fully-qualified path representing Account resource.
     * @returns {string} A string representing the account.
     */
    matchAccountFromAccountName(accountName) {
        return this.pathTemplates.accountPathTemplate.match(accountName).account;
    }
    /**
     * Return a fully-qualified accountAccessBinding resource name string.
     *
     * @param {string} account
     * @param {string} access_binding
     * @returns {string} Resource name string.
     */
    accountAccessBindingPath(account, accessBinding) {
        return this.pathTemplates.accountAccessBindingPathTemplate.render({
            account: account,
            access_binding: accessBinding,
        });
    }
    /**
     * Parse the account from AccountAccessBinding resource.
     *
     * @param {string} accountAccessBindingName
     *   A fully-qualified path representing account_access_binding resource.
     * @returns {string} A string representing the account.
     */
    matchAccountFromAccountAccessBindingName(accountAccessBindingName) {
        return this.pathTemplates.accountAccessBindingPathTemplate.match(accountAccessBindingName).account;
    }
    /**
     * Parse the access_binding from AccountAccessBinding resource.
     *
     * @param {string} accountAccessBindingName
     *   A fully-qualified path representing account_access_binding resource.
     * @returns {string} A string representing the access_binding.
     */
    matchAccessBindingFromAccountAccessBindingName(accountAccessBindingName) {
        return this.pathTemplates.accountAccessBindingPathTemplate.match(accountAccessBindingName).access_binding;
    }
    /**
     * Return a fully-qualified accountSummary resource name string.
     *
     * @param {string} account_summary
     * @returns {string} Resource name string.
     */
    accountSummaryPath(accountSummary) {
        return this.pathTemplates.accountSummaryPathTemplate.render({
            account_summary: accountSummary,
        });
    }
    /**
     * Parse the account_summary from AccountSummary resource.
     *
     * @param {string} accountSummaryName
     *   A fully-qualified path representing AccountSummary resource.
     * @returns {string} A string representing the account_summary.
     */
    matchAccountSummaryFromAccountSummaryName(accountSummaryName) {
        return this.pathTemplates.accountSummaryPathTemplate.match(accountSummaryName).account_summary;
    }
    /**
     * Return a fully-qualified adSenseLink resource name string.
     *
     * @param {string} property
     * @param {string} adsense_link
     * @returns {string} Resource name string.
     */
    adSenseLinkPath(property, adsenseLink) {
        return this.pathTemplates.adSenseLinkPathTemplate.render({
            property: property,
            adsense_link: adsenseLink,
        });
    }
    /**
     * Parse the property from AdSenseLink resource.
     *
     * @param {string} adSenseLinkName
     *   A fully-qualified path representing AdSenseLink resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromAdSenseLinkName(adSenseLinkName) {
        return this.pathTemplates.adSenseLinkPathTemplate.match(adSenseLinkName)
            .property;
    }
    /**
     * Parse the adsense_link from AdSenseLink resource.
     *
     * @param {string} adSenseLinkName
     *   A fully-qualified path representing AdSenseLink resource.
     * @returns {string} A string representing the adsense_link.
     */
    matchAdsenseLinkFromAdSenseLinkName(adSenseLinkName) {
        return this.pathTemplates.adSenseLinkPathTemplate.match(adSenseLinkName)
            .adsense_link;
    }
    /**
     * Return a fully-qualified attributionSettings resource name string.
     *
     * @param {string} property
     * @returns {string} Resource name string.
     */
    attributionSettingsPath(property) {
        return this.pathTemplates.attributionSettingsPathTemplate.render({
            property: property,
        });
    }
    /**
     * Parse the property from AttributionSettings resource.
     *
     * @param {string} attributionSettingsName
     *   A fully-qualified path representing AttributionSettings resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromAttributionSettingsName(attributionSettingsName) {
        return this.pathTemplates.attributionSettingsPathTemplate.match(attributionSettingsName).property;
    }
    /**
     * Return a fully-qualified audience resource name string.
     *
     * @param {string} property
     * @param {string} audience
     * @returns {string} Resource name string.
     */
    audiencePath(property, audience) {
        return this.pathTemplates.audiencePathTemplate.render({
            property: property,
            audience: audience,
        });
    }
    /**
     * Parse the property from Audience resource.
     *
     * @param {string} audienceName
     *   A fully-qualified path representing Audience resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromAudienceName(audienceName) {
        return this.pathTemplates.audiencePathTemplate.match(audienceName).property;
    }
    /**
     * Parse the audience from Audience resource.
     *
     * @param {string} audienceName
     *   A fully-qualified path representing Audience resource.
     * @returns {string} A string representing the audience.
     */
    matchAudienceFromAudienceName(audienceName) {
        return this.pathTemplates.audiencePathTemplate.match(audienceName).audience;
    }
    /**
     * Return a fully-qualified bigQueryLink resource name string.
     *
     * @param {string} property
     * @param {string} bigquery_link
     * @returns {string} Resource name string.
     */
    bigQueryLinkPath(property, bigqueryLink) {
        return this.pathTemplates.bigQueryLinkPathTemplate.render({
            property: property,
            bigquery_link: bigqueryLink,
        });
    }
    /**
     * Parse the property from BigQueryLink resource.
     *
     * @param {string} bigQueryLinkName
     *   A fully-qualified path representing BigQueryLink resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromBigQueryLinkName(bigQueryLinkName) {
        return this.pathTemplates.bigQueryLinkPathTemplate.match(bigQueryLinkName)
            .property;
    }
    /**
     * Parse the bigquery_link from BigQueryLink resource.
     *
     * @param {string} bigQueryLinkName
     *   A fully-qualified path representing BigQueryLink resource.
     * @returns {string} A string representing the bigquery_link.
     */
    matchBigqueryLinkFromBigQueryLinkName(bigQueryLinkName) {
        return this.pathTemplates.bigQueryLinkPathTemplate.match(bigQueryLinkName)
            .bigquery_link;
    }
    /**
     * Return a fully-qualified calculatedMetric resource name string.
     *
     * @param {string} property
     * @param {string} calculated_metric
     * @returns {string} Resource name string.
     */
    calculatedMetricPath(property, calculatedMetric) {
        return this.pathTemplates.calculatedMetricPathTemplate.render({
            property: property,
            calculated_metric: calculatedMetric,
        });
    }
    /**
     * Parse the property from CalculatedMetric resource.
     *
     * @param {string} calculatedMetricName
     *   A fully-qualified path representing CalculatedMetric resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromCalculatedMetricName(calculatedMetricName) {
        return this.pathTemplates.calculatedMetricPathTemplate.match(calculatedMetricName).property;
    }
    /**
     * Parse the calculated_metric from CalculatedMetric resource.
     *
     * @param {string} calculatedMetricName
     *   A fully-qualified path representing CalculatedMetric resource.
     * @returns {string} A string representing the calculated_metric.
     */
    matchCalculatedMetricFromCalculatedMetricName(calculatedMetricName) {
        return this.pathTemplates.calculatedMetricPathTemplate.match(calculatedMetricName).calculated_metric;
    }
    /**
     * Return a fully-qualified channelGroup resource name string.
     *
     * @param {string} property
     * @param {string} channel_group
     * @returns {string} Resource name string.
     */
    channelGroupPath(property, channelGroup) {
        return this.pathTemplates.channelGroupPathTemplate.render({
            property: property,
            channel_group: channelGroup,
        });
    }
    /**
     * Parse the property from ChannelGroup resource.
     *
     * @param {string} channelGroupName
     *   A fully-qualified path representing ChannelGroup resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromChannelGroupName(channelGroupName) {
        return this.pathTemplates.channelGroupPathTemplate.match(channelGroupName)
            .property;
    }
    /**
     * Parse the channel_group from ChannelGroup resource.
     *
     * @param {string} channelGroupName
     *   A fully-qualified path representing ChannelGroup resource.
     * @returns {string} A string representing the channel_group.
     */
    matchChannelGroupFromChannelGroupName(channelGroupName) {
        return this.pathTemplates.channelGroupPathTemplate.match(channelGroupName)
            .channel_group;
    }
    /**
     * Return a fully-qualified conversionEvent resource name string.
     *
     * @param {string} property
     * @param {string} conversion_event
     * @returns {string} Resource name string.
     */
    conversionEventPath(property, conversionEvent) {
        return this.pathTemplates.conversionEventPathTemplate.render({
            property: property,
            conversion_event: conversionEvent,
        });
    }
    /**
     * Parse the property from ConversionEvent resource.
     *
     * @param {string} conversionEventName
     *   A fully-qualified path representing ConversionEvent resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromConversionEventName(conversionEventName) {
        return this.pathTemplates.conversionEventPathTemplate.match(conversionEventName).property;
    }
    /**
     * Parse the conversion_event from ConversionEvent resource.
     *
     * @param {string} conversionEventName
     *   A fully-qualified path representing ConversionEvent resource.
     * @returns {string} A string representing the conversion_event.
     */
    matchConversionEventFromConversionEventName(conversionEventName) {
        return this.pathTemplates.conversionEventPathTemplate.match(conversionEventName).conversion_event;
    }
    /**
     * Return a fully-qualified customDimension resource name string.
     *
     * @param {string} property
     * @param {string} custom_dimension
     * @returns {string} Resource name string.
     */
    customDimensionPath(property, customDimension) {
        return this.pathTemplates.customDimensionPathTemplate.render({
            property: property,
            custom_dimension: customDimension,
        });
    }
    /**
     * Parse the property from CustomDimension resource.
     *
     * @param {string} customDimensionName
     *   A fully-qualified path representing CustomDimension resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromCustomDimensionName(customDimensionName) {
        return this.pathTemplates.customDimensionPathTemplate.match(customDimensionName).property;
    }
    /**
     * Parse the custom_dimension from CustomDimension resource.
     *
     * @param {string} customDimensionName
     *   A fully-qualified path representing CustomDimension resource.
     * @returns {string} A string representing the custom_dimension.
     */
    matchCustomDimensionFromCustomDimensionName(customDimensionName) {
        return this.pathTemplates.customDimensionPathTemplate.match(customDimensionName).custom_dimension;
    }
    /**
     * Return a fully-qualified customMetric resource name string.
     *
     * @param {string} property
     * @param {string} custom_metric
     * @returns {string} Resource name string.
     */
    customMetricPath(property, customMetric) {
        return this.pathTemplates.customMetricPathTemplate.render({
            property: property,
            custom_metric: customMetric,
        });
    }
    /**
     * Parse the property from CustomMetric resource.
     *
     * @param {string} customMetricName
     *   A fully-qualified path representing CustomMetric resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromCustomMetricName(customMetricName) {
        return this.pathTemplates.customMetricPathTemplate.match(customMetricName)
            .property;
    }
    /**
     * Parse the custom_metric from CustomMetric resource.
     *
     * @param {string} customMetricName
     *   A fully-qualified path representing CustomMetric resource.
     * @returns {string} A string representing the custom_metric.
     */
    matchCustomMetricFromCustomMetricName(customMetricName) {
        return this.pathTemplates.customMetricPathTemplate.match(customMetricName)
            .custom_metric;
    }
    /**
     * Return a fully-qualified dataRedactionSettings resource name string.
     *
     * @param {string} property
     * @param {string} data_stream
     * @returns {string} Resource name string.
     */
    dataRedactionSettingsPath(property, dataStream) {
        return this.pathTemplates.dataRedactionSettingsPathTemplate.render({
            property: property,
            data_stream: dataStream,
        });
    }
    /**
     * Parse the property from DataRedactionSettings resource.
     *
     * @param {string} dataRedactionSettingsName
     *   A fully-qualified path representing DataRedactionSettings resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromDataRedactionSettingsName(dataRedactionSettingsName) {
        return this.pathTemplates.dataRedactionSettingsPathTemplate.match(dataRedactionSettingsName).property;
    }
    /**
     * Parse the data_stream from DataRedactionSettings resource.
     *
     * @param {string} dataRedactionSettingsName
     *   A fully-qualified path representing DataRedactionSettings resource.
     * @returns {string} A string representing the data_stream.
     */
    matchDataStreamFromDataRedactionSettingsName(dataRedactionSettingsName) {
        return this.pathTemplates.dataRedactionSettingsPathTemplate.match(dataRedactionSettingsName).data_stream;
    }
    /**
     * Return a fully-qualified dataRetentionSettings resource name string.
     *
     * @param {string} property
     * @returns {string} Resource name string.
     */
    dataRetentionSettingsPath(property) {
        return this.pathTemplates.dataRetentionSettingsPathTemplate.render({
            property: property,
        });
    }
    /**
     * Parse the property from DataRetentionSettings resource.
     *
     * @param {string} dataRetentionSettingsName
     *   A fully-qualified path representing DataRetentionSettings resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromDataRetentionSettingsName(dataRetentionSettingsName) {
        return this.pathTemplates.dataRetentionSettingsPathTemplate.match(dataRetentionSettingsName).property;
    }
    /**
     * Return a fully-qualified dataSharingSettings resource name string.
     *
     * @param {string} account
     * @returns {string} Resource name string.
     */
    dataSharingSettingsPath(account) {
        return this.pathTemplates.dataSharingSettingsPathTemplate.render({
            account: account,
        });
    }
    /**
     * Parse the account from DataSharingSettings resource.
     *
     * @param {string} dataSharingSettingsName
     *   A fully-qualified path representing DataSharingSettings resource.
     * @returns {string} A string representing the account.
     */
    matchAccountFromDataSharingSettingsName(dataSharingSettingsName) {
        return this.pathTemplates.dataSharingSettingsPathTemplate.match(dataSharingSettingsName).account;
    }
    /**
     * Return a fully-qualified dataStream resource name string.
     *
     * @param {string} property
     * @param {string} data_stream
     * @returns {string} Resource name string.
     */
    dataStreamPath(property, dataStream) {
        return this.pathTemplates.dataStreamPathTemplate.render({
            property: property,
            data_stream: dataStream,
        });
    }
    /**
     * Parse the property from DataStream resource.
     *
     * @param {string} dataStreamName
     *   A fully-qualified path representing DataStream resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromDataStreamName(dataStreamName) {
        return this.pathTemplates.dataStreamPathTemplate.match(dataStreamName)
            .property;
    }
    /**
     * Parse the data_stream from DataStream resource.
     *
     * @param {string} dataStreamName
     *   A fully-qualified path representing DataStream resource.
     * @returns {string} A string representing the data_stream.
     */
    matchDataStreamFromDataStreamName(dataStreamName) {
        return this.pathTemplates.dataStreamPathTemplate.match(dataStreamName)
            .data_stream;
    }
    /**
     * Return a fully-qualified displayVideo360AdvertiserLink resource name string.
     *
     * @param {string} property
     * @returns {string} Resource name string.
     */
    displayVideo360AdvertiserLinkPath(property) {
        return this.pathTemplates.displayVideo360AdvertiserLinkPathTemplate.render({
            property: property,
        });
    }
    /**
     * Parse the property from DisplayVideo360AdvertiserLink resource.
     *
     * @param {string} displayVideo360AdvertiserLinkName
     *   A fully-qualified path representing DisplayVideo360AdvertiserLink resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromDisplayVideo360AdvertiserLinkName(displayVideo360AdvertiserLinkName) {
        return this.pathTemplates.displayVideo360AdvertiserLinkPathTemplate.match(displayVideo360AdvertiserLinkName).property;
    }
    /**
     * Return a fully-qualified displayVideo360AdvertiserLinkProposal resource name string.
     *
     * @param {string} property
     * @returns {string} Resource name string.
     */
    displayVideo360AdvertiserLinkProposalPath(property) {
        return this.pathTemplates.displayVideo360AdvertiserLinkProposalPathTemplate.render({
            property: property,
        });
    }
    /**
     * Parse the property from DisplayVideo360AdvertiserLinkProposal resource.
     *
     * @param {string} displayVideo360AdvertiserLinkProposalName
     *   A fully-qualified path representing DisplayVideo360AdvertiserLinkProposal resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromDisplayVideo360AdvertiserLinkProposalName(displayVideo360AdvertiserLinkProposalName) {
        return this.pathTemplates.displayVideo360AdvertiserLinkProposalPathTemplate.match(displayVideo360AdvertiserLinkProposalName).property;
    }
    /**
     * Return a fully-qualified enhancedMeasurementSettings resource name string.
     *
     * @param {string} property
     * @param {string} data_stream
     * @returns {string} Resource name string.
     */
    enhancedMeasurementSettingsPath(property, dataStream) {
        return this.pathTemplates.enhancedMeasurementSettingsPathTemplate.render({
            property: property,
            data_stream: dataStream,
        });
    }
    /**
     * Parse the property from EnhancedMeasurementSettings resource.
     *
     * @param {string} enhancedMeasurementSettingsName
     *   A fully-qualified path representing EnhancedMeasurementSettings resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromEnhancedMeasurementSettingsName(enhancedMeasurementSettingsName) {
        return this.pathTemplates.enhancedMeasurementSettingsPathTemplate.match(enhancedMeasurementSettingsName).property;
    }
    /**
     * Parse the data_stream from EnhancedMeasurementSettings resource.
     *
     * @param {string} enhancedMeasurementSettingsName
     *   A fully-qualified path representing EnhancedMeasurementSettings resource.
     * @returns {string} A string representing the data_stream.
     */
    matchDataStreamFromEnhancedMeasurementSettingsName(enhancedMeasurementSettingsName) {
        return this.pathTemplates.enhancedMeasurementSettingsPathTemplate.match(enhancedMeasurementSettingsName).data_stream;
    }
    /**
     * Return a fully-qualified eventCreateRule resource name string.
     *
     * @param {string} property
     * @param {string} data_stream
     * @param {string} event_create_rule
     * @returns {string} Resource name string.
     */
    eventCreateRulePath(property, dataStream, eventCreateRule) {
        return this.pathTemplates.eventCreateRulePathTemplate.render({
            property: property,
            data_stream: dataStream,
            event_create_rule: eventCreateRule,
        });
    }
    /**
     * Parse the property from EventCreateRule resource.
     *
     * @param {string} eventCreateRuleName
     *   A fully-qualified path representing EventCreateRule resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromEventCreateRuleName(eventCreateRuleName) {
        return this.pathTemplates.eventCreateRulePathTemplate.match(eventCreateRuleName).property;
    }
    /**
     * Parse the data_stream from EventCreateRule resource.
     *
     * @param {string} eventCreateRuleName
     *   A fully-qualified path representing EventCreateRule resource.
     * @returns {string} A string representing the data_stream.
     */
    matchDataStreamFromEventCreateRuleName(eventCreateRuleName) {
        return this.pathTemplates.eventCreateRulePathTemplate.match(eventCreateRuleName).data_stream;
    }
    /**
     * Parse the event_create_rule from EventCreateRule resource.
     *
     * @param {string} eventCreateRuleName
     *   A fully-qualified path representing EventCreateRule resource.
     * @returns {string} A string representing the event_create_rule.
     */
    matchEventCreateRuleFromEventCreateRuleName(eventCreateRuleName) {
        return this.pathTemplates.eventCreateRulePathTemplate.match(eventCreateRuleName).event_create_rule;
    }
    /**
     * Return a fully-qualified eventEditRule resource name string.
     *
     * @param {string} property
     * @param {string} data_stream
     * @param {string} event_edit_rule
     * @returns {string} Resource name string.
     */
    eventEditRulePath(property, dataStream, eventEditRule) {
        return this.pathTemplates.eventEditRulePathTemplate.render({
            property: property,
            data_stream: dataStream,
            event_edit_rule: eventEditRule,
        });
    }
    /**
     * Parse the property from EventEditRule resource.
     *
     * @param {string} eventEditRuleName
     *   A fully-qualified path representing EventEditRule resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromEventEditRuleName(eventEditRuleName) {
        return this.pathTemplates.eventEditRulePathTemplate.match(eventEditRuleName)
            .property;
    }
    /**
     * Parse the data_stream from EventEditRule resource.
     *
     * @param {string} eventEditRuleName
     *   A fully-qualified path representing EventEditRule resource.
     * @returns {string} A string representing the data_stream.
     */
    matchDataStreamFromEventEditRuleName(eventEditRuleName) {
        return this.pathTemplates.eventEditRulePathTemplate.match(eventEditRuleName)
            .data_stream;
    }
    /**
     * Parse the event_edit_rule from EventEditRule resource.
     *
     * @param {string} eventEditRuleName
     *   A fully-qualified path representing EventEditRule resource.
     * @returns {string} A string representing the event_edit_rule.
     */
    matchEventEditRuleFromEventEditRuleName(eventEditRuleName) {
        return this.pathTemplates.eventEditRulePathTemplate.match(eventEditRuleName)
            .event_edit_rule;
    }
    /**
     * Return a fully-qualified expandedDataSet resource name string.
     *
     * @param {string} property
     * @param {string} expanded_data_set
     * @returns {string} Resource name string.
     */
    expandedDataSetPath(property, expandedDataSet) {
        return this.pathTemplates.expandedDataSetPathTemplate.render({
            property: property,
            expanded_data_set: expandedDataSet,
        });
    }
    /**
     * Parse the property from ExpandedDataSet resource.
     *
     * @param {string} expandedDataSetName
     *   A fully-qualified path representing ExpandedDataSet resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromExpandedDataSetName(expandedDataSetName) {
        return this.pathTemplates.expandedDataSetPathTemplate.match(expandedDataSetName).property;
    }
    /**
     * Parse the expanded_data_set from ExpandedDataSet resource.
     *
     * @param {string} expandedDataSetName
     *   A fully-qualified path representing ExpandedDataSet resource.
     * @returns {string} A string representing the expanded_data_set.
     */
    matchExpandedDataSetFromExpandedDataSetName(expandedDataSetName) {
        return this.pathTemplates.expandedDataSetPathTemplate.match(expandedDataSetName).expanded_data_set;
    }
    /**
     * Return a fully-qualified firebaseLink resource name string.
     *
     * @param {string} property
     * @param {string} firebase_link
     * @returns {string} Resource name string.
     */
    firebaseLinkPath(property, firebaseLink) {
        return this.pathTemplates.firebaseLinkPathTemplate.render({
            property: property,
            firebase_link: firebaseLink,
        });
    }
    /**
     * Parse the property from FirebaseLink resource.
     *
     * @param {string} firebaseLinkName
     *   A fully-qualified path representing FirebaseLink resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromFirebaseLinkName(firebaseLinkName) {
        return this.pathTemplates.firebaseLinkPathTemplate.match(firebaseLinkName)
            .property;
    }
    /**
     * Parse the firebase_link from FirebaseLink resource.
     *
     * @param {string} firebaseLinkName
     *   A fully-qualified path representing FirebaseLink resource.
     * @returns {string} A string representing the firebase_link.
     */
    matchFirebaseLinkFromFirebaseLinkName(firebaseLinkName) {
        return this.pathTemplates.firebaseLinkPathTemplate.match(firebaseLinkName)
            .firebase_link;
    }
    /**
     * Return a fully-qualified globalSiteTag resource name string.
     *
     * @param {string} property
     * @param {string} data_stream
     * @returns {string} Resource name string.
     */
    globalSiteTagPath(property, dataStream) {
        return this.pathTemplates.globalSiteTagPathTemplate.render({
            property: property,
            data_stream: dataStream,
        });
    }
    /**
     * Parse the property from GlobalSiteTag resource.
     *
     * @param {string} globalSiteTagName
     *   A fully-qualified path representing GlobalSiteTag resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromGlobalSiteTagName(globalSiteTagName) {
        return this.pathTemplates.globalSiteTagPathTemplate.match(globalSiteTagName)
            .property;
    }
    /**
     * Parse the data_stream from GlobalSiteTag resource.
     *
     * @param {string} globalSiteTagName
     *   A fully-qualified path representing GlobalSiteTag resource.
     * @returns {string} A string representing the data_stream.
     */
    matchDataStreamFromGlobalSiteTagName(globalSiteTagName) {
        return this.pathTemplates.globalSiteTagPathTemplate.match(globalSiteTagName)
            .data_stream;
    }
    /**
     * Return a fully-qualified googleAdsLink resource name string.
     *
     * @param {string} property
     * @param {string} google_ads_link
     * @returns {string} Resource name string.
     */
    googleAdsLinkPath(property, googleAdsLink) {
        return this.pathTemplates.googleAdsLinkPathTemplate.render({
            property: property,
            google_ads_link: googleAdsLink,
        });
    }
    /**
     * Parse the property from GoogleAdsLink resource.
     *
     * @param {string} googleAdsLinkName
     *   A fully-qualified path representing GoogleAdsLink resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromGoogleAdsLinkName(googleAdsLinkName) {
        return this.pathTemplates.googleAdsLinkPathTemplate.match(googleAdsLinkName)
            .property;
    }
    /**
     * Parse the google_ads_link from GoogleAdsLink resource.
     *
     * @param {string} googleAdsLinkName
     *   A fully-qualified path representing GoogleAdsLink resource.
     * @returns {string} A string representing the google_ads_link.
     */
    matchGoogleAdsLinkFromGoogleAdsLinkName(googleAdsLinkName) {
        return this.pathTemplates.googleAdsLinkPathTemplate.match(googleAdsLinkName)
            .google_ads_link;
    }
    /**
     * Return a fully-qualified googleSignalsSettings resource name string.
     *
     * @param {string} property
     * @returns {string} Resource name string.
     */
    googleSignalsSettingsPath(property) {
        return this.pathTemplates.googleSignalsSettingsPathTemplate.render({
            property: property,
        });
    }
    /**
     * Parse the property from GoogleSignalsSettings resource.
     *
     * @param {string} googleSignalsSettingsName
     *   A fully-qualified path representing GoogleSignalsSettings resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromGoogleSignalsSettingsName(googleSignalsSettingsName) {
        return this.pathTemplates.googleSignalsSettingsPathTemplate.match(googleSignalsSettingsName).property;
    }
    /**
     * Return a fully-qualified keyEvent resource name string.
     *
     * @param {string} property
     * @param {string} key_event
     * @returns {string} Resource name string.
     */
    keyEventPath(property, keyEvent) {
        return this.pathTemplates.keyEventPathTemplate.render({
            property: property,
            key_event: keyEvent,
        });
    }
    /**
     * Parse the property from KeyEvent resource.
     *
     * @param {string} keyEventName
     *   A fully-qualified path representing KeyEvent resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromKeyEventName(keyEventName) {
        return this.pathTemplates.keyEventPathTemplate.match(keyEventName).property;
    }
    /**
     * Parse the key_event from KeyEvent resource.
     *
     * @param {string} keyEventName
     *   A fully-qualified path representing KeyEvent resource.
     * @returns {string} A string representing the key_event.
     */
    matchKeyEventFromKeyEventName(keyEventName) {
        return this.pathTemplates.keyEventPathTemplate.match(keyEventName)
            .key_event;
    }
    /**
     * Return a fully-qualified measurementProtocolSecret resource name string.
     *
     * @param {string} property
     * @param {string} data_stream
     * @param {string} measurement_protocol_secret
     * @returns {string} Resource name string.
     */
    measurementProtocolSecretPath(property, dataStream, measurementProtocolSecret) {
        return this.pathTemplates.measurementProtocolSecretPathTemplate.render({
            property: property,
            data_stream: dataStream,
            measurement_protocol_secret: measurementProtocolSecret,
        });
    }
    /**
     * Parse the property from MeasurementProtocolSecret resource.
     *
     * @param {string} measurementProtocolSecretName
     *   A fully-qualified path representing MeasurementProtocolSecret resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromMeasurementProtocolSecretName(measurementProtocolSecretName) {
        return this.pathTemplates.measurementProtocolSecretPathTemplate.match(measurementProtocolSecretName).property;
    }
    /**
     * Parse the data_stream from MeasurementProtocolSecret resource.
     *
     * @param {string} measurementProtocolSecretName
     *   A fully-qualified path representing MeasurementProtocolSecret resource.
     * @returns {string} A string representing the data_stream.
     */
    matchDataStreamFromMeasurementProtocolSecretName(measurementProtocolSecretName) {
        return this.pathTemplates.measurementProtocolSecretPathTemplate.match(measurementProtocolSecretName).data_stream;
    }
    /**
     * Parse the measurement_protocol_secret from MeasurementProtocolSecret resource.
     *
     * @param {string} measurementProtocolSecretName
     *   A fully-qualified path representing MeasurementProtocolSecret resource.
     * @returns {string} A string representing the measurement_protocol_secret.
     */
    matchMeasurementProtocolSecretFromMeasurementProtocolSecretName(measurementProtocolSecretName) {
        return this.pathTemplates.measurementProtocolSecretPathTemplate.match(measurementProtocolSecretName).measurement_protocol_secret;
    }
    /**
     * Return a fully-qualified property resource name string.
     *
     * @param {string} property
     * @returns {string} Resource name string.
     */
    propertyPath(property) {
        return this.pathTemplates.propertyPathTemplate.render({
            property: property,
        });
    }
    /**
     * Parse the property from Property resource.
     *
     * @param {string} propertyName
     *   A fully-qualified path representing Property resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromPropertyName(propertyName) {
        return this.pathTemplates.propertyPathTemplate.match(propertyName).property;
    }
    /**
     * Return a fully-qualified propertyAccessBinding resource name string.
     *
     * @param {string} property
     * @param {string} access_binding
     * @returns {string} Resource name string.
     */
    propertyAccessBindingPath(property, accessBinding) {
        return this.pathTemplates.propertyAccessBindingPathTemplate.render({
            property: property,
            access_binding: accessBinding,
        });
    }
    /**
     * Parse the property from PropertyAccessBinding resource.
     *
     * @param {string} propertyAccessBindingName
     *   A fully-qualified path representing property_access_binding resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromPropertyAccessBindingName(propertyAccessBindingName) {
        return this.pathTemplates.propertyAccessBindingPathTemplate.match(propertyAccessBindingName).property;
    }
    /**
     * Parse the access_binding from PropertyAccessBinding resource.
     *
     * @param {string} propertyAccessBindingName
     *   A fully-qualified path representing property_access_binding resource.
     * @returns {string} A string representing the access_binding.
     */
    matchAccessBindingFromPropertyAccessBindingName(propertyAccessBindingName) {
        return this.pathTemplates.propertyAccessBindingPathTemplate.match(propertyAccessBindingName).access_binding;
    }
    /**
     * Return a fully-qualified rollupPropertySourceLink resource name string.
     *
     * @param {string} property
     * @param {string} rollup_property_source_link
     * @returns {string} Resource name string.
     */
    rollupPropertySourceLinkPath(property, rollupPropertySourceLink) {
        return this.pathTemplates.rollupPropertySourceLinkPathTemplate.render({
            property: property,
            rollup_property_source_link: rollupPropertySourceLink,
        });
    }
    /**
     * Parse the property from RollupPropertySourceLink resource.
     *
     * @param {string} rollupPropertySourceLinkName
     *   A fully-qualified path representing RollupPropertySourceLink resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromRollupPropertySourceLinkName(rollupPropertySourceLinkName) {
        return this.pathTemplates.rollupPropertySourceLinkPathTemplate.match(rollupPropertySourceLinkName).property;
    }
    /**
     * Parse the rollup_property_source_link from RollupPropertySourceLink resource.
     *
     * @param {string} rollupPropertySourceLinkName
     *   A fully-qualified path representing RollupPropertySourceLink resource.
     * @returns {string} A string representing the rollup_property_source_link.
     */
    matchRollupPropertySourceLinkFromRollupPropertySourceLinkName(rollupPropertySourceLinkName) {
        return this.pathTemplates.rollupPropertySourceLinkPathTemplate.match(rollupPropertySourceLinkName).rollup_property_source_link;
    }
    /**
     * Return a fully-qualified sKAdNetworkConversionValueSchema resource name string.
     *
     * @param {string} property
     * @param {string} data_stream
     * @param {string} skadnetwork_conversion_value_schema
     * @returns {string} Resource name string.
     */
    sKAdNetworkConversionValueSchemaPath(property, dataStream, skadnetworkConversionValueSchema) {
        return this.pathTemplates.sKAdNetworkConversionValueSchemaPathTemplate.render({
            property: property,
            data_stream: dataStream,
            skadnetwork_conversion_value_schema: skadnetworkConversionValueSchema,
        });
    }
    /**
     * Parse the property from SKAdNetworkConversionValueSchema resource.
     *
     * @param {string} sKAdNetworkConversionValueSchemaName
     *   A fully-qualified path representing SKAdNetworkConversionValueSchema resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromSKAdNetworkConversionValueSchemaName(sKAdNetworkConversionValueSchemaName) {
        return this.pathTemplates.sKAdNetworkConversionValueSchemaPathTemplate.match(sKAdNetworkConversionValueSchemaName).property;
    }
    /**
     * Parse the data_stream from SKAdNetworkConversionValueSchema resource.
     *
     * @param {string} sKAdNetworkConversionValueSchemaName
     *   A fully-qualified path representing SKAdNetworkConversionValueSchema resource.
     * @returns {string} A string representing the data_stream.
     */
    matchDataStreamFromSKAdNetworkConversionValueSchemaName(sKAdNetworkConversionValueSchemaName) {
        return this.pathTemplates.sKAdNetworkConversionValueSchemaPathTemplate.match(sKAdNetworkConversionValueSchemaName).data_stream;
    }
    /**
     * Parse the skadnetwork_conversion_value_schema from SKAdNetworkConversionValueSchema resource.
     *
     * @param {string} sKAdNetworkConversionValueSchemaName
     *   A fully-qualified path representing SKAdNetworkConversionValueSchema resource.
     * @returns {string} A string representing the skadnetwork_conversion_value_schema.
     */
    matchSkadnetworkConversionValueSchemaFromSKAdNetworkConversionValueSchemaName(sKAdNetworkConversionValueSchemaName) {
        return this.pathTemplates.sKAdNetworkConversionValueSchemaPathTemplate.match(sKAdNetworkConversionValueSchemaName).skadnetwork_conversion_value_schema;
    }
    /**
     * Return a fully-qualified searchAds360Link resource name string.
     *
     * @param {string} property
     * @returns {string} Resource name string.
     */
    searchAds360LinkPath(property) {
        return this.pathTemplates.searchAds360LinkPathTemplate.render({
            property: property,
        });
    }
    /**
     * Parse the property from SearchAds360Link resource.
     *
     * @param {string} searchAds360LinkName
     *   A fully-qualified path representing SearchAds360Link resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromSearchAds360LinkName(searchAds360LinkName) {
        return this.pathTemplates.searchAds360LinkPathTemplate.match(searchAds360LinkName).property;
    }
    /**
     * Return a fully-qualified subpropertyEventFilter resource name string.
     *
     * @param {string} property
     * @param {string} sub_property_event_filter
     * @returns {string} Resource name string.
     */
    subpropertyEventFilterPath(property, subPropertyEventFilter) {
        return this.pathTemplates.subpropertyEventFilterPathTemplate.render({
            property: property,
            sub_property_event_filter: subPropertyEventFilter,
        });
    }
    /**
     * Parse the property from SubpropertyEventFilter resource.
     *
     * @param {string} subpropertyEventFilterName
     *   A fully-qualified path representing SubpropertyEventFilter resource.
     * @returns {string} A string representing the property.
     */
    matchPropertyFromSubpropertyEventFilterName(subpropertyEventFilterName) {
        return this.pathTemplates.subpropertyEventFilterPathTemplate.match(subpropertyEventFilterName).property;
    }
    /**
     * Parse the sub_property_event_filter from SubpropertyEventFilter resource.
     *
     * @param {string} subpropertyEventFilterName
     *   A fully-qualified path representing SubpropertyEventFilter resource.
     * @returns {string} A string representing the sub_property_event_filter.
     */
    matchSubPropertyEventFilterFromSubpropertyEventFilterName(subpropertyEventFilterName) {
        return this.pathTemplates.subpropertyEventFilterPathTemplate.match(subpropertyEventFilterName).sub_property_event_filter;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.analyticsAdminServiceStub && !this._terminated) {
            return this.analyticsAdminServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.AnalyticsAdminServiceClient = AnalyticsAdminServiceClient;
//# sourceMappingURL=analytics_admin_service_client.js.map